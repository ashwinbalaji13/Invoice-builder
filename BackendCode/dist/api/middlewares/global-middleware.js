"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setGlobalMiddleware = undefined;

var _express = require("express");

var _express2 = _interopRequireDefault(_express);

var _morgan = require("morgan");

var _morgan2 = _interopRequireDefault(_morgan);

var _passport = require("passport");

var _passport2 = _interopRequireDefault(_passport);

var _swaggerUiExpress = require("swagger-ui-express");

var _swaggerUiExpress2 = _interopRequireDefault(_swaggerUiExpress);

var _swagger = require("../../config/swagger.json");

var _swagger2 = _interopRequireDefault(_swagger);

var _passportJwt = require("./passport-jwt.js");

var _passportGoogle = require("./passport-google");

var _expressSession = require("express-session");

var _expressSession2 = _interopRequireDefault(_expressSession);

var _development = require("../../config/env/development.js");

var _usersModels = require("../resources/users/users.models.js");

var _usersModels2 = _interopRequireDefault(_usersModels);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var setGlobalMiddleware = exports.setGlobalMiddleware = function setGlobalMiddleware(app) {
  app.use((0, _morgan2.default)("dev"));
  //passport
  app.use(_passport2.default.initialize());
  (0, _passportJwt.configureJWTStrategy)();
  //google auth
  app.use(_passport2.default.session());
  (0, _passportGoogle.configureGoogleStrategy)();
  app.use((0, _expressSession2.default)({
    secret: _development.devconfig.secret,
    resave: false,
    saveUninitialized: true
  }));
  //save user into session
  _passport2.default.serializeUser(function (user, done) {
    console.log("serialize", user);
    done(null, user._id);
  });
  //extract userid from session
  _passport2.default.deserializeUser(function (user, done) {
    console.log("deserialize", user);
    _usersModels2.default.findById(id, function (err, user) {
      done(null, user);
    });
  });
  app.use(_express2.default.json());
  app.use(_express2.default.urlencoded({ extended: true }));
  app.use("/api-docs", _swaggerUiExpress2.default.serve, _swaggerUiExpress2.default.setup(_swagger2.default, {
    explorer: true
  }));
  app.use(function (req, res, next) {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    next();
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvbWlkZGxld2FyZXMvZ2xvYmFsLW1pZGRsZXdhcmUuanMiXSwibmFtZXMiOlsic2V0R2xvYmFsTWlkZGxld2FyZSIsImFwcCIsInVzZSIsInBhc3Nwb3J0IiwiaW5pdGlhbGl6ZSIsInNlc3Npb24iLCJzZWNyZXQiLCJkZXZjb25maWciLCJyZXNhdmUiLCJzYXZlVW5pbml0aWFsaXplZCIsInNlcmlhbGl6ZVVzZXIiLCJ1c2VyIiwiZG9uZSIsImNvbnNvbGUiLCJsb2ciLCJfaWQiLCJkZXNlcmlhbGl6ZVVzZXIiLCJ1c2Vyc01vZGVscyIsImZpbmRCeUlkIiwiaWQiLCJlcnIiLCJleHByZXNzIiwianNvbiIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsInN3YWdnZXJVaSIsInNlcnZlIiwic2V0dXAiLCJzd2FnZ2VyRG9jdW1lbnQiLCJleHBsb3JlciIsInJlcSIsInJlcyIsIm5leHQiLCJoZWFkZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7Ozs7O0FBRU8sSUFBTUEsb0RBQXNCLFNBQXRCQSxtQkFBc0IsTUFBTztBQUN4Q0MsTUFBSUMsR0FBSixDQUFRLHNCQUFPLEtBQVAsQ0FBUjtBQUNBO0FBQ0FELE1BQUlDLEdBQUosQ0FBUUMsbUJBQVNDLFVBQVQsRUFBUjtBQUNBO0FBQ0E7QUFDQUgsTUFBSUMsR0FBSixDQUFRQyxtQkFBU0UsT0FBVCxFQUFSO0FBQ0E7QUFDQUosTUFBSUMsR0FBSixDQUNFLDhCQUFRO0FBQ05JLFlBQVFDLHVCQUFVRCxNQURaO0FBRU5FLFlBQVEsS0FGRjtBQUdOQyx1QkFBbUI7QUFIYixHQUFSLENBREY7QUFPQTtBQUNBTixxQkFBU08sYUFBVCxDQUF1QixVQUFTQyxJQUFULEVBQWVDLElBQWYsRUFBcUI7QUFDMUNDLFlBQVFDLEdBQVIsQ0FBWSxXQUFaLEVBQXlCSCxJQUF6QjtBQUNBQyxTQUFLLElBQUwsRUFBV0QsS0FBS0ksR0FBaEI7QUFDRCxHQUhEO0FBSUE7QUFDQVoscUJBQVNhLGVBQVQsQ0FBeUIsVUFBU0wsSUFBVCxFQUFlQyxJQUFmLEVBQXFCO0FBQzVDQyxZQUFRQyxHQUFSLENBQVksYUFBWixFQUEyQkgsSUFBM0I7QUFDQU0sMEJBQVlDLFFBQVosQ0FBcUJDLEVBQXJCLEVBQXlCLFVBQUNDLEdBQUQsRUFBTVQsSUFBTixFQUFlO0FBQ3RDQyxXQUFLLElBQUwsRUFBV0QsSUFBWDtBQUNELEtBRkQ7QUFHRCxHQUxEO0FBTUFWLE1BQUlDLEdBQUosQ0FBUW1CLGtCQUFRQyxJQUFSLEVBQVI7QUFDQXJCLE1BQUlDLEdBQUosQ0FBUW1CLGtCQUFRRSxVQUFSLENBQW1CLEVBQUVDLFVBQVUsSUFBWixFQUFuQixDQUFSO0FBQ0F2QixNQUFJQyxHQUFKLENBQ0UsV0FERixFQUVFdUIsMkJBQVVDLEtBRlosRUFHRUQsMkJBQVVFLEtBQVYsQ0FBZ0JDLGlCQUFoQixFQUFpQztBQUMvQkMsY0FBVTtBQURxQixHQUFqQyxDQUhGO0FBT0E1QixNQUFJQyxHQUFKLENBQVEsVUFBUzRCLEdBQVQsRUFBY0MsR0FBZCxFQUFtQkMsSUFBbkIsRUFBeUI7QUFDL0JELFFBQUlFLE1BQUosQ0FBVyw2QkFBWCxFQUEwQyxHQUExQztBQUNBRixRQUFJRSxNQUFKLENBQVcsOEJBQVgsRUFBMkMsZ0RBQTNDO0FBQ0FEO0FBQ0QsR0FKRDtBQUtELENBekNNIiwiZmlsZSI6Imdsb2JhbC1taWRkbGV3YXJlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcclxuaW1wb3J0IGxvZ2dlciBmcm9tIFwibW9yZ2FuXCI7XHJcbmltcG9ydCBwYXNzcG9ydCBmcm9tIFwicGFzc3BvcnRcIjtcclxuaW1wb3J0IHN3YWdnZXJVaSBmcm9tIFwic3dhZ2dlci11aS1leHByZXNzXCI7XHJcbmltcG9ydCBzd2FnZ2VyRG9jdW1lbnQgZnJvbSBcIi4uLy4uL2NvbmZpZy9zd2FnZ2VyLmpzb25cIjtcclxuaW1wb3J0IHsgY29uZmlndXJlSldUU3RyYXRlZ3kgfSBmcm9tIFwiLi9wYXNzcG9ydC1qd3QuanNcIjtcclxuaW1wb3J0IHsgY29uZmlndXJlR29vZ2xlU3RyYXRlZ3kgfSBmcm9tIFwiLi9wYXNzcG9ydC1nb29nbGVcIjtcclxuaW1wb3J0IHNlc3Npb24gZnJvbSBcImV4cHJlc3Mtc2Vzc2lvblwiO1xyXG5pbXBvcnQgeyBkZXZjb25maWcgfSBmcm9tIFwiLi4vLi4vY29uZmlnL2Vudi9kZXZlbG9wbWVudC5qc1wiO1xyXG5pbXBvcnQgdXNlcnNNb2RlbHMgZnJvbSBcIi4uL3Jlc291cmNlcy91c2Vycy91c2Vycy5tb2RlbHMuanNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBzZXRHbG9iYWxNaWRkbGV3YXJlID0gYXBwID0+IHtcclxuICBhcHAudXNlKGxvZ2dlcihcImRldlwiKSk7XHJcbiAgLy9wYXNzcG9ydFxyXG4gIGFwcC51c2UocGFzc3BvcnQuaW5pdGlhbGl6ZSgpKTtcclxuICBjb25maWd1cmVKV1RTdHJhdGVneSgpO1xyXG4gIC8vZ29vZ2xlIGF1dGhcclxuICBhcHAudXNlKHBhc3Nwb3J0LnNlc3Npb24oKSk7XHJcbiAgY29uZmlndXJlR29vZ2xlU3RyYXRlZ3koKTtcclxuICBhcHAudXNlKFxyXG4gICAgc2Vzc2lvbih7XHJcbiAgICAgIHNlY3JldDogZGV2Y29uZmlnLnNlY3JldCxcclxuICAgICAgcmVzYXZlOiBmYWxzZSxcclxuICAgICAgc2F2ZVVuaW5pdGlhbGl6ZWQ6IHRydWVcclxuICAgIH0pXHJcbiAgKTtcclxuICAvL3NhdmUgdXNlciBpbnRvIHNlc3Npb25cclxuICBwYXNzcG9ydC5zZXJpYWxpemVVc2VyKGZ1bmN0aW9uKHVzZXIsIGRvbmUpIHtcclxuICAgIGNvbnNvbGUubG9nKFwic2VyaWFsaXplXCIsIHVzZXIpO1xyXG4gICAgZG9uZShudWxsLCB1c2VyLl9pZCk7XHJcbiAgfSk7XHJcbiAgLy9leHRyYWN0IHVzZXJpZCBmcm9tIHNlc3Npb25cclxuICBwYXNzcG9ydC5kZXNlcmlhbGl6ZVVzZXIoZnVuY3Rpb24odXNlciwgZG9uZSkge1xyXG4gICAgY29uc29sZS5sb2coXCJkZXNlcmlhbGl6ZVwiLCB1c2VyKTtcclxuICAgIHVzZXJzTW9kZWxzLmZpbmRCeUlkKGlkLCAoZXJyLCB1c2VyKSA9PiB7XHJcbiAgICAgIGRvbmUobnVsbCwgdXNlcik7XHJcbiAgICB9KTtcclxuICB9KTtcclxuICBhcHAudXNlKGV4cHJlc3MuanNvbigpKTtcclxuICBhcHAudXNlKGV4cHJlc3MudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiB0cnVlIH0pKTtcclxuICBhcHAudXNlKFxyXG4gICAgXCIvYXBpLWRvY3NcIixcclxuICAgIHN3YWdnZXJVaS5zZXJ2ZSxcclxuICAgIHN3YWdnZXJVaS5zZXR1cChzd2FnZ2VyRG9jdW1lbnQsIHtcclxuICAgICAgZXhwbG9yZXI6IHRydWVcclxuICAgIH0pXHJcbiAgKTtcclxuICBhcHAudXNlKGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XHJcbiAgICByZXMuaGVhZGVyKFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luXCIsIFwiKlwiKTtcclxuICAgIHJlcy5oZWFkZXIoXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzXCIsIFwiT3JpZ2luLCBYLVJlcXVlc3RlZC1XaXRoLCBDb250ZW50LVR5cGUsIEFjY2VwdFwiKTtcclxuICAgIG5leHQoKTtcclxuICB9KTtcclxufTtcclxuIl19