"use strict";

var _express = require("express");

var _express2 = _interopRequireDefault(_express);

var _mongoose = require("mongoose");

var _mongoose2 = _interopRequireDefault(_mongoose);

var _morgan = require("morgan");

var _morgan2 = _interopRequireDefault(_morgan);

var _swaggerUiExpress = require("swagger-ui-express");

var _swaggerUiExpress2 = _interopRequireDefault(_swaggerUiExpress);

var _swagger = require("./config/swagger.json");

var _swagger2 = _interopRequireDefault(_swagger);

var _index = require("./api/index.js");

var _globalMiddleware = require("./api/middlewares/global-middleware");

var _development = require("../src/config/env/development");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import { router } from "./config/routes";
var app = (0, _express2.default)();

_mongoose2.default.Promise = global.Promise;
_mongoose2.default.connect("mongodb://localhost/invoice-builder",
// "mongodb://ashwin:ashwin13@ds117545.mlab.com:17545/invoice_builder",
{ useNewUrlParser: true, useCreateIndex: true });
(0, _globalMiddleware.setGlobalMiddleware)(app);

app.get("/", function (req, res) {
  res.json({
    mes: "welcome"
  });
});

app.use("/api", _index.restRouter);

app.use(function (req, res, next) {
  var error = new Error("Not found");
  error.message = "Invalid route";
  error.status = 404;
  next(error);
});
app.use(function (error, req, res, next) {
  res.status(error.status || 500);
  return res.json({
    error: {
      message: error.message
    }
  });
});
app.listen(_development.devconfig.port, function () {
  console.log("listening to port 3000");
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAuanMiXSwibmFtZXMiOlsiYXBwIiwibW9uZ29vc2UiLCJQcm9taXNlIiwiZ2xvYmFsIiwiY29ubmVjdCIsInVzZU5ld1VybFBhcnNlciIsInVzZUNyZWF0ZUluZGV4IiwiZ2V0IiwicmVxIiwicmVzIiwianNvbiIsIm1lcyIsInVzZSIsInJlc3RSb3V0ZXIiLCJuZXh0IiwiZXJyb3IiLCJFcnJvciIsIm1lc3NhZ2UiLCJzdGF0dXMiLCJsaXN0ZW4iLCJkZXZjb25maWciLCJwb3J0IiwiY29uc29sZSIsImxvZyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFOQTtBQU9BLElBQUlBLE1BQU0sd0JBQVY7O0FBRUFDLG1CQUFTQyxPQUFULEdBQW1CQyxPQUFPRCxPQUExQjtBQUNBRCxtQkFBU0csT0FBVCxDQUNFLHFDQURGO0FBRUU7QUFDQSxFQUFFQyxpQkFBaUIsSUFBbkIsRUFBeUJDLGdCQUFnQixJQUF6QyxFQUhGO0FBS0EsMkNBQW9CTixHQUFwQjs7QUFFQUEsSUFBSU8sR0FBSixDQUFRLEdBQVIsRUFBYSxVQUFDQyxHQUFELEVBQU1DLEdBQU4sRUFBYztBQUN6QkEsTUFBSUMsSUFBSixDQUFTO0FBQ1BDLFNBQUs7QUFERSxHQUFUO0FBR0QsQ0FKRDs7QUFNQVgsSUFBSVksR0FBSixDQUFRLE1BQVIsRUFBZ0JDLGlCQUFoQjs7QUFFQWIsSUFBSVksR0FBSixDQUFRLFVBQUNKLEdBQUQsRUFBTUMsR0FBTixFQUFXSyxJQUFYLEVBQW9CO0FBQzFCLE1BQU1DLFFBQVEsSUFBSUMsS0FBSixDQUFVLFdBQVYsQ0FBZDtBQUNBRCxRQUFNRSxPQUFOLEdBQWdCLGVBQWhCO0FBQ0FGLFFBQU1HLE1BQU4sR0FBZSxHQUFmO0FBQ0FKLE9BQUtDLEtBQUw7QUFDRCxDQUxEO0FBTUFmLElBQUlZLEdBQUosQ0FBUSxVQUFDRyxLQUFELEVBQVFQLEdBQVIsRUFBYUMsR0FBYixFQUFrQkssSUFBbEIsRUFBMkI7QUFDakNMLE1BQUlTLE1BQUosQ0FBV0gsTUFBTUcsTUFBTixJQUFnQixHQUEzQjtBQUNBLFNBQU9ULElBQUlDLElBQUosQ0FBUztBQUNkSyxXQUFPO0FBQ0xFLGVBQVNGLE1BQU1FO0FBRFY7QUFETyxHQUFULENBQVA7QUFLRCxDQVBEO0FBUUFqQixJQUFJbUIsTUFBSixDQUFXQyx1QkFBVUMsSUFBckIsRUFBMkIsWUFBTTtBQUMvQkMsVUFBUUMsR0FBUixDQUFZLHdCQUFaO0FBQ0QsQ0FGRCIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcyBmcm9tIFwiZXhwcmVzc1wiO1xyXG5pbXBvcnQgbW9uZ29vc2UgZnJvbSBcIm1vbmdvb3NlXCI7XHJcbi8vIGltcG9ydCB7IHJvdXRlciB9IGZyb20gXCIuL2NvbmZpZy9yb3V0ZXNcIjtcclxuaW1wb3J0IGxvZ2dlciBmcm9tIFwibW9yZ2FuXCI7XHJcbmltcG9ydCBzd2FnZ2VyVWkgZnJvbSBcInN3YWdnZXItdWktZXhwcmVzc1wiO1xyXG5pbXBvcnQgc3dhZ2dlckRvY3VtZW50IGZyb20gXCIuL2NvbmZpZy9zd2FnZ2VyLmpzb25cIjtcclxuaW1wb3J0IHsgcmVzdFJvdXRlciB9IGZyb20gXCIuL2FwaS9pbmRleC5qc1wiO1xyXG5pbXBvcnQgeyBzZXRHbG9iYWxNaWRkbGV3YXJlIH0gZnJvbSBcIi4vYXBpL21pZGRsZXdhcmVzL2dsb2JhbC1taWRkbGV3YXJlXCI7XHJcbmltcG9ydCB7IGRldmNvbmZpZyB9IGZyb20gXCIuLi9zcmMvY29uZmlnL2Vudi9kZXZlbG9wbWVudFwiO1xyXG5sZXQgYXBwID0gZXhwcmVzcygpO1xyXG5cclxubW9uZ29vc2UuUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xyXG5tb25nb29zZS5jb25uZWN0KFxyXG4gIFwibW9uZ29kYjovL2xvY2FsaG9zdC9pbnZvaWNlLWJ1aWxkZXJcIixcclxuICAvLyBcIm1vbmdvZGI6Ly9hc2h3aW46YXNod2luMTNAZHMxMTc1NDUubWxhYi5jb206MTc1NDUvaW52b2ljZV9idWlsZGVyXCIsXHJcbiAgeyB1c2VOZXdVcmxQYXJzZXI6IHRydWUsIHVzZUNyZWF0ZUluZGV4OiB0cnVlIH1cclxuKTtcclxuc2V0R2xvYmFsTWlkZGxld2FyZShhcHApO1xyXG5cclxuYXBwLmdldChcIi9cIiwgKHJlcSwgcmVzKSA9PiB7XHJcbiAgcmVzLmpzb24oe1xyXG4gICAgbWVzOiBcIndlbGNvbWVcIlxyXG4gIH0pO1xyXG59KTtcclxuXHJcbmFwcC51c2UoXCIvYXBpXCIsIHJlc3RSb3V0ZXIpO1xyXG5cclxuYXBwLnVzZSgocmVxLCByZXMsIG5leHQpID0+IHtcclxuICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihcIk5vdCBmb3VuZFwiKTtcclxuICBlcnJvci5tZXNzYWdlID0gXCJJbnZhbGlkIHJvdXRlXCI7XHJcbiAgZXJyb3Iuc3RhdHVzID0gNDA0O1xyXG4gIG5leHQoZXJyb3IpO1xyXG59KTtcclxuYXBwLnVzZSgoZXJyb3IsIHJlcSwgcmVzLCBuZXh0KSA9PiB7XHJcbiAgcmVzLnN0YXR1cyhlcnJvci5zdGF0dXMgfHwgNTAwKTtcclxuICByZXR1cm4gcmVzLmpzb24oe1xyXG4gICAgZXJyb3I6IHtcclxuICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZVxyXG4gICAgfVxyXG4gIH0pO1xyXG59KTtcclxuYXBwLmxpc3RlbihkZXZjb25maWcucG9ydCwgKCkgPT4ge1xyXG4gIGNvbnNvbGUubG9nKFwibGlzdGVuaW5nIHRvIHBvcnQgMzAwMFwiKTtcclxufSk7XHJcbiJdfQ==