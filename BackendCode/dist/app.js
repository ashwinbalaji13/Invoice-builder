"use strict";

var _express = require("express");

var _express2 = _interopRequireDefault(_express);

var _mongoose = require("mongoose");

var _mongoose2 = _interopRequireDefault(_mongoose);

var _morgan = require("morgan");

var _morgan2 = _interopRequireDefault(_morgan);

var _swaggerUiExpress = require("swagger-ui-express");

var _swaggerUiExpress2 = _interopRequireDefault(_swaggerUiExpress);

var _swagger = require("./config/swagger.json");

var _swagger2 = _interopRequireDefault(_swagger);

var _index = require("./api/index.js");

var _globalMiddleware = require("./api/middlewares/global-middleware");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var app = (0, _express2.default)();
// import { router } from "./config/routes";


_mongoose2.default.Promise = global.Promise;
_mongoose2.default.connect("mongodb://localhost/invoice-builder", { useNewUrlParser: true, useCreateIndex: true });
(0, _globalMiddleware.setGlobalMiddleware)(app);

app.get("/", function (req, res) {
  res.json({
    mes: "welcome"
  });
});

app.use("/api", _index.restRouter);

app.use(function (req, res, next) {
  var error = new Error("Not found");
  error.message = "Invalid route";
  error.status = 404;
  next(error);
});
app.use(function (error, req, res, next) {
  res.status(error.status || 500);
  return res.json({
    error: {
      message: error.message
    }
  });
});
app.listen(3000, function () {
  console.log("listening to port 3000");
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAuanMiXSwibmFtZXMiOlsiYXBwIiwibW9uZ29vc2UiLCJQcm9taXNlIiwiZ2xvYmFsIiwiY29ubmVjdCIsInVzZU5ld1VybFBhcnNlciIsInVzZUNyZWF0ZUluZGV4IiwiZ2V0IiwicmVxIiwicmVzIiwianNvbiIsIm1lcyIsInVzZSIsInJlc3RSb3V0ZXIiLCJuZXh0IiwiZXJyb3IiLCJFcnJvciIsIm1lc3NhZ2UiLCJzdGF0dXMiLCJsaXN0ZW4iLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7OztBQUNBLElBQUlBLE1BQU0sd0JBQVY7QUFOQTs7O0FBUUFDLG1CQUFTQyxPQUFULEdBQW1CQyxPQUFPRCxPQUExQjtBQUNBRCxtQkFBU0csT0FBVCxDQUNFLHFDQURGLEVBRUUsRUFBRUMsaUJBQWlCLElBQW5CLEVBQXlCQyxnQkFBZ0IsSUFBekMsRUFGRjtBQUlBLDJDQUFvQk4sR0FBcEI7O0FBRUFBLElBQUlPLEdBQUosQ0FBUSxHQUFSLEVBQWEsVUFBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQWM7QUFDekJBLE1BQUlDLElBQUosQ0FBUztBQUNQQyxTQUFLO0FBREUsR0FBVDtBQUdELENBSkQ7O0FBTUFYLElBQUlZLEdBQUosQ0FBUSxNQUFSLEVBQWdCQyxpQkFBaEI7O0FBRUFiLElBQUlZLEdBQUosQ0FBUSxVQUFDSixHQUFELEVBQU1DLEdBQU4sRUFBV0ssSUFBWCxFQUFvQjtBQUMxQixNQUFNQyxRQUFRLElBQUlDLEtBQUosQ0FBVSxXQUFWLENBQWQ7QUFDQUQsUUFBTUUsT0FBTixHQUFnQixlQUFoQjtBQUNBRixRQUFNRyxNQUFOLEdBQWUsR0FBZjtBQUNBSixPQUFLQyxLQUFMO0FBQ0QsQ0FMRDtBQU1BZixJQUFJWSxHQUFKLENBQVEsVUFBQ0csS0FBRCxFQUFRUCxHQUFSLEVBQWFDLEdBQWIsRUFBa0JLLElBQWxCLEVBQTJCO0FBQ2pDTCxNQUFJUyxNQUFKLENBQVdILE1BQU1HLE1BQU4sSUFBZ0IsR0FBM0I7QUFDQSxTQUFPVCxJQUFJQyxJQUFKLENBQVM7QUFDZEssV0FBTztBQUNMRSxlQUFTRixNQUFNRTtBQURWO0FBRE8sR0FBVCxDQUFQO0FBS0QsQ0FQRDtBQVFBakIsSUFBSW1CLE1BQUosQ0FBVyxJQUFYLEVBQWlCLFlBQU07QUFDckJDLFVBQVFDLEdBQVIsQ0FBWSx3QkFBWjtBQUNELENBRkQiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcclxuaW1wb3J0IG1vbmdvb3NlIGZyb20gXCJtb25nb29zZVwiO1xyXG4vLyBpbXBvcnQgeyByb3V0ZXIgfSBmcm9tIFwiLi9jb25maWcvcm91dGVzXCI7XHJcbmltcG9ydCBsb2dnZXIgZnJvbSBcIm1vcmdhblwiO1xyXG5pbXBvcnQgc3dhZ2dlclVpIGZyb20gXCJzd2FnZ2VyLXVpLWV4cHJlc3NcIjtcclxuaW1wb3J0IHN3YWdnZXJEb2N1bWVudCBmcm9tIFwiLi9jb25maWcvc3dhZ2dlci5qc29uXCI7XHJcbmltcG9ydCB7IHJlc3RSb3V0ZXIgfSBmcm9tIFwiLi9hcGkvaW5kZXguanNcIjtcclxuaW1wb3J0IHsgc2V0R2xvYmFsTWlkZGxld2FyZSB9IGZyb20gXCIuL2FwaS9taWRkbGV3YXJlcy9nbG9iYWwtbWlkZGxld2FyZVwiO1xyXG5sZXQgYXBwID0gZXhwcmVzcygpO1xyXG5cclxubW9uZ29vc2UuUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xyXG5tb25nb29zZS5jb25uZWN0KFxyXG4gIFwibW9uZ29kYjovL2xvY2FsaG9zdC9pbnZvaWNlLWJ1aWxkZXJcIixcclxuICB7IHVzZU5ld1VybFBhcnNlcjogdHJ1ZSwgdXNlQ3JlYXRlSW5kZXg6IHRydWUgfVxyXG4pO1xyXG5zZXRHbG9iYWxNaWRkbGV3YXJlKGFwcCk7XHJcblxyXG5hcHAuZ2V0KFwiL1wiLCAocmVxLCByZXMpID0+IHtcclxuICByZXMuanNvbih7XHJcbiAgICBtZXM6IFwid2VsY29tZVwiXHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuYXBwLnVzZShcIi9hcGlcIiwgcmVzdFJvdXRlcik7XHJcblxyXG5hcHAudXNlKChyZXEsIHJlcywgbmV4dCkgPT4ge1xyXG4gIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKFwiTm90IGZvdW5kXCIpO1xyXG4gIGVycm9yLm1lc3NhZ2UgPSBcIkludmFsaWQgcm91dGVcIjtcclxuICBlcnJvci5zdGF0dXMgPSA0MDQ7XHJcbiAgbmV4dChlcnJvcik7XHJcbn0pO1xyXG5hcHAudXNlKChlcnJvciwgcmVxLCByZXMsIG5leHQpID0+IHtcclxuICByZXMuc3RhdHVzKGVycm9yLnN0YXR1cyB8fCA1MDApO1xyXG4gIHJldHVybiByZXMuanNvbih7XHJcbiAgICBlcnJvcjoge1xyXG4gICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlXHJcbiAgICB9XHJcbiAgfSk7XHJcbn0pO1xyXG5hcHAubGlzdGVuKDMwMDAsICgpID0+IHtcclxuICBjb25zb2xlLmxvZyhcImxpc3RlbmluZyB0byBwb3J0IDMwMDBcIik7XHJcbn0pO1xyXG4iXX0=